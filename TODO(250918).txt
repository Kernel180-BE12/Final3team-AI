# TODO List - 2024/09/18

## 🔥 **당장 해야할 일 (오늘 완료 필수)**

### 1. 사용자별 대화 세션 관리 시스템 (기존 DB 활용) - 2시간
- [ ] `src/core/session_manager.py` 신규 생성 (DB 기반)
- [ ] 기존 DB 테이블 활용: `user_template_request`, `user_template_request_log`
- [ ] 세션 = PENDING 상태의 `user_template_request` 레코드
- [ ] `request_content` 필드에 세션 데이터 JSON 저장
- [ ] 30분 자동 만료 처리 (created_at 기준)
- [ ] SQLAlchemy ORM 연결 설정

### 1-1. 백엔드 RDB 연결을 위한 추가 작업 - 1시간
- [ ] **DB 연결 정보 확인 필요** (백엔드 팀과 협의)
  - MySQL/PostgreSQL 서버 주소
  - 데이터베이스 이름
  - 사용자 계정 (읽기/쓰기 권한)
  - 비밀번호
  - 포트 번호 (MySQL: 3306, PostgreSQL: 5432)
- [ ] **환경 설정 파일 추가**
  - `config.py`에 DB 설정 추가
  - `.env` 파일에 민감 정보 저장
  - 개발/운영 환경 분리
- [ ] **필수 패키지 설치**
  ```bash
  pip install sqlalchemy pymysql psycopg2-binary alembic
  ```
- [ ] **DB 연결 테스트 코드 작성**
  - 연결 확인
  - 기본 CRUD 테스트
  - 에러 처리 및 재연결 로직

### 2. 실시간 변수 업데이트 API 엔드포인트 3개 추가 - 2시간
- [ ] `POST /ai/templates/{session_id}/variables` - 변수 개별 업데이트
- [ ] `GET /ai/templates/{session_id}/preview` - 부분 완성 미리보기
- [ ] `POST /ai/templates/{session_id}/complete` - 최종 완성
- [ ] 세션 매니저와 연동
- [ ] 에러 처리 및 검증

### 3. 부분 완성 템플릿 미리보기 기능 - 1시간
- [ ] `src/core/template_preview.py` 신규 생성
- [ ] 확정 변수 → 실제 값 치환
- [ ] 누락 변수 → 플레이스홀더 표시
- [ ] 완성도 퍼센트 계산
- [ ] 다음 필요 변수 제안

### 4. Agent2 파이프라인 검증 및 테스트 - 1시간
- [ ] Variable Mapper 연동 상태 점검
- [ ] 재질문 → 변수 수집 → 템플릿 완성 플로우 확인
- [ ] 5단계 검증 도구 실행 여부 확인
- [ ] 전체 플로우 통합 테스트 실행

### 1-2. 백엔드 팀과 협의 필요 사항 📞
- [ ] **DB 스키마 확인**
  - `user_template_request.request_content` 필드 크기 확인 (LONGTEXT로 충분한지)
  - JSON 데이터 저장 형식 협의
  - 세션 상태 관리 방식 협의 (PENDING → COMPLETED)
- [ ] **권한 및 접근 방식**
  - AI 서버에서 DB 직접 접근 vs API 경유 접근
  - 읽기/쓰기 권한 범위 설정
  - 네트워크 보안 정책 (VPN, 방화벽 등)
- [ ] **데이터 동기화 정책**
  - AI에서 생성한 세션과 백엔드 세션 ID 매핑 방식
  - 템플릿 완성 시 백엔드 알림 방식 (webhook, 폴링 등)
  - 에러 발생 시 롤백 정책

### 1-3. 환경 설정 예시 코드
```python
# config.py에 추가
DATABASE_CONFIG = {
    'development': {
        'host': 'localhost',
        'port': 3306,
        'database': 'jober_dev',
        'username': 'jober_ai_user',
        'password': os.getenv('DB_PASSWORD')
    },
    'production': {
        'host': os.getenv('DB_HOST'),
        'port': int(os.getenv('DB_PORT', 3306)),
        'database': os.getenv('DB_NAME'),
        'username': os.getenv('DB_USER'),
        'password': os.getenv('DB_PASSWORD')
    }
}
```

**당장 해야할 일 총 예상 시간: 7시간** (DB 연결 작업 1시간 추가)

---

## 🚀 **고도화 때 해야할 일 (다음 단계)**

### A급 - 다음 주 구현 예정 (성능/확장성)

#### A1. Celery 멀티스레드 시스템 도입 - 2-3일
- [ ] `celery_app.py` 신규 생성
- [ ] Redis/RabbitMQ 브로커 설정
- [ ] AI 템플릿 생성을 비동기 Task로 처리
- [ ] Worker 스케일링 및 모니터링
- [ ] 결과 저장소 연동

#### A2. 링크/URL/전자문서 자동 인식 및 타입 변경 - 1-2일
- [ ] URL 패턴 인식 (`http://`, `https://`, `www.`)
- [ ] 전자문서 키워드 인식 ("PDF", "문서", "파일")
- [ ] 자동 타입 변경: `MESSAGE` → `LINK` → `DOCS`
- [ ] 타입별 버튼 자동 생성 로직

#### A3. 카테고리별 Few-Shot 예제 추가 - 2-3일
- [ ] 각 카테고리별 우수 템플릿 예제 수집
- [ ] Few-Shot Learning 프롬프트 구조 설계
- [ ] 카테고리 감지 시 관련 예제 자동 로딩
- [ ] 템플릿 품질 향상 측정

### B급 - 추후 개선 사항 (품질/최적화)

#### B1. 고도화된 검증 규칙 강화 - 1-2일
- [ ] 전화번호 형식 검증 강화 (국가별)
- [ ] 이메일 형식 검증 고도화
- [ ] 날짜/시간 형식 표준화
- [ ] 주소 형식 검증 (우편번호, 도로명)

#### B2. 성능 최적화 및 모니터링 - 2-3일
- [ ] API 응답 시간 최적화
- [ ] 메모리 사용량 최적화
- [ ] 동시 사용자 100명 부하 테스트
- [ ] 실시간 모니터링 대시보드

#### B3. Template Selector 응답 구조 확장 - 1일
- [ ] 부분 완성 정보 포함하도록 확장
- [ ] 매핑 커버리지 및 세션 ID 추가
- [ ] 더 상세한 메타데이터 제공

### C급 - 장기 개선 사항 (UX/편의성)

#### C1. 프론트엔드 연동 최적화 - 2-3일
- [ ] WebSocket 실시간 업데이트 지원
- [ ] SSE(Server-Sent Events) 구현
- [ ] 채팅 UI 최적화된 API 응답 구조
- [ ] 에러 처리 및 재시도 로직 강화

#### C2. 고급 세션 관리 기능 - 1-2일
- [ ] 세션 히스토리 저장
- [ ] 사용자별 템플릿 즐겨찾기
- [ ] 세션 복구 기능
- [ ] 세션 공유 기능

#### C3. 데이터 분석 및 인사이트 - 2-3일
- [ ] 사용자 패턴 분석
- [ ] 인기 템플릿 카테고리 분석
- [ ] 변수 매핑 성공률 분석
- [ ] 품질 개선을 위한 데이터 수집

---

## ✅ 이미 구현된 기능들 (참고용)

### 1. Variable Mapper 시스템 ✅ (완료)
- [x] `src/tools/variable_mapper.py` - 이미 완전 구현됨
- [x] Agent1 6W 변수 → Agent2 템플릿 변수 자동 매핑 로직
- [x] 키워드 기반 매핑 규칙 정의 (고객명←누가, 일시←언제 등)
- [x] 유사성 기반 매핑 (애매한 경우 처리)
- [x] 매핑 신뢰도 점수 계산 (mapping_coverage)
- [x] 매핑 실패 변수 리스트 추출
- [x] Agent2에서 Variable Mapper 연동 완료
- [x] 부족한 변수 발견 시 "need_more_variables" 응답 반환

### 2. 비속어 및 정책 검증 도구 ✅ (완료)
- [x] `src/tools/profanity_checker.py` - 완전 구현
- [x] `src/tools/info_comm_law_tool.py` - 정책 검증 도구 완전 구현
- [x] `src/tools/blacklist_tool.py` - 금지어 검증
- [x] `src/tools/whitelist_tool.py` - 허용어 검증
- [x] 5단계 검증 시스템 동작

### 3. 사용자 입력 검증 및 예외 처리 ✅ (완료)
- [x] `is_meaningful_text()` 함수로 이상한 입력 차단
- [x] 특수문자만 입력, 공백만 입력 차단
- [x] 너무 짧은 텍스트 (2글자 미만) 차단
- [x] 텍스트 길이 제한 (500자)
- [x] Rate limiting (분당 10회)

### 4. 대화 컨텍스트 관리 ✅ (부분 완료)
- [x] `conversation_context` 파라미터 지원
- [x] 이전 입력 기록 및 컨텍스트 조합 처리
- [x] Agent1에서 `is_follow_up` 플래그로 재질문 상태 관리
- [x] 컨텍스트 조합: `f"{conversation_context} {user_input}"`

### 5. 버튼 자동 생성 ✅ (부분 완료)
- [x] `_get_metadata_buttons()` 함수 구현
- [x] 기존 템플릿의 버튼 정보 추출
- [x] 키워드 기반 버튼 필요성 추론 ("자세히", "확인", "신청", "예약", "문의")
- [x] Button 모델 정의 (id, name, ordering, linkPc, linkAnd, linkIos)

## ❌ 미구현 또는 부족한 기능들 (긴급도별 분류)

### 🔥 **1순위 - 챗봇 완성을 위한 핵심 기능**

#### 1. 링크/URL/전자문서 자동 인식 및 타입 변경 기능 🆕
- [ ] URL 패턴 인식 시스템 구현 (`http://`, `https://`, `www.`)
- [ ] 전자문서 키워드 인식 ("PDF", "문서", "파일", "첨부")
- [ ] 자동 타입 변경 로직:
  - 기본: `MESSAGE` → 링크 감지 시: `LINK` → 문서 감지 시: `DOCS`
- [ ] 템플릿 타입에 따른 버튼 자동 생성
  ```python
  def detect_content_type(content: str) -> str:
      if any(url in content for url in ['http://', 'https://', 'www.']):
          return 'LINK'
      elif any(doc in content for doc in ['pdf', '문서', '파일', '첨부']):
          return 'DOCS'
      else:
          return 'MESSAGE'
  ```

#### 2. 사용자별 대화 세션 관리 시스템 (Redis/메모리 기반)
- [ ] `src/core/session_manager.py` 신규 생성
- [ ] 다중 사용자 세션 저장소 구현
- [ ] 세션 자동 만료 처리 (30분)
- [ ] Thread-safe 동시 접속 처리

#### 3. 실시간 변수 업데이트 API 엔드포인트
- [ ] 새로운 엔드포인트 3개 추가:
  ```python
  @app.post("/ai/templates/{session_id}/variables")  # 변수 개별 업데이트
  @app.get("/ai/templates/{session_id}/preview")     # 부분 완성 미리보기
  @app.post("/ai/templates/{session_id}/complete")   # 최종 완성
  ```

#### 4. 부분 완성 템플릿 미리보기 기능
- [ ] `src/core/template_preview.py` 신규 생성
- [ ] 확정 변수 → 실제 값, 누락 변수 → 플레이스홀더
- [ ] 완성도 퍼센트 계산 및 표시

### ⚡ **2순위 - 성능 및 확장성**

#### 5. Celery 멀티스레드 도입 🆕
- [ ] `celery_app.py` 신규 생성
- [ ] Redis/RabbitMQ 브로커 설정
- [ ] 템플릿 생성을 비동기 Task로 처리
- [ ] 대용량 트래픽 대응을 위한 Worker 스케일링
- [ ] 결과 저장소 (Redis) 연동

#### 6. 카테고리별 Few-Shot 예제 추가 🆕
- [ ] 각 카테고리별 템플릿 예제 수집 및 정리
- [ ] Few-Shot Learning 프롬프트 구조 설계:
  ```python
  # 예약/예약내역 (003001) 카테고리 예제
  few_shot_examples = {
      "003001": [
          "예약이 완료되었습니다. 일시: #{일시}, 장소: #{장소}",
          "#{고객명}님의 #{서비스명} 예약이 확정되었습니다."
      ]
  }
  ```
- [ ] 카테고리 감지 시 관련 예제 자동 로딩

#### 7. Agent2 템플릿 → 변수 완성 → 검증 파이프라인 확인 🆕
- [ ] Agent2 템플릿 생성 후 Variable Mapper 연동 상태 점검
- [ ] 변수 부족 시 Agent1 재질문 → 변수 수집 → 템플릿 완성 플로우 검증
- [ ] 모든 변수 완성 후 5단계 검증 도구 실행 확인
- [ ] 검증 실패 시 적절한 에러 메시지 및 가이드 제공

### 🔧 **3순위 - 품질 개선**

#### 8. 변수별 고도화된 검증 규칙
- [ ] 전화번호 형식 검증 강화 (국가별 포맷)
- [ ] 이메일 형식 검증 강화
- [ ] 날짜/시간 형식 표준화
- [ ] 주소 형식 검증 (우편번호, 도로명)

#### 9. Template Selector 응답 구조 확장
- [ ] 부분 완성 정보 포함하도록 확장
- [ ] 매핑 커버리지 및 세션 ID 추가

#### 10. 성능 및 안정성 테스트
- [ ] 동시 사용자 100명 테스트
- [ ] 메모리 누수 검사
- [ ] API 응답 시간 최적화

## 🚨 **발견된 주요 이슈들**

### Issue 1: Celery 미구현 🔥
- **현재 상태**: FastAPI의 기본 async만 사용
- **필요성**: 대용량 트래픽 및 긴 AI 처리 시간 대응
- **해결책**: Celery + Redis 도입 필요

### Issue 2: 링크/문서 자동 인식 미구현 🔥
- **현재 상태**: 모든 템플릿이 `MESSAGE` 타입으로 고정
- **필요성**: 사용자 요구사항 (URL/문서 감지 시 자동 타입 변경)
- **해결책**: 컨텐츠 분석 후 타입 자동 변경 로직

### Issue 3: 카테고리별 Few-Shot 부족 🔥
- **현재 상태**: 일반적인 템플릿 생성만 가능
- **필요성**: 카테고리별 품질 향상
- **해결책**: 각 카테고리별 우수 예제 수집 및 프롬프트 개선

### Issue 4: 세션 관리 부재
- **현재 상태**: 요청별 독립 처리 (상태 유지 불가)
- **필요성**: 챗봇 형태 대화를 위한 상태 관리
- **해결책**: Redis 기반 세션 스토어 구현

## ⏰ **개발 우선순위 및 예상 기간**

### 🔥 **이번 주 내 완료 (핵심)**
1. **링크/URL/문서 자동 인식 및 타입 변경** (1-2일)
2. **세션 관리 시스템** (1-2일)
3. **실시간 변수 업데이트 API** (1일)

### ⚡ **다음 주 완료 (확장)**
4. **Celery 멀티스레드 도입** (2-3일)
5. **카테고리별 Few-Shot 추가** (2-3일)
6. **부분 완성 미리보기** (1-2일)

### 🔧 **추후 완료 (개선)**
7. **고도화된 검증 규칙** (1-2일)
8. **성능 테스트 및 최적화** (2-3일)

---

## 🎯 **핵심 개념 및 아키텍처 분석**

### Variable Mapper 시스템 동작 원리 📚
```python
# 1. Agent1이 6W 변수 추출
agent1_variables = {
    '누가 (To/Recipient)': '김철수님',
    '무엇을 (What/Subject)': '독서모임',
    '언제 (When/Time)': '2024년 1월 15일 14:00',
    '어디서 (Where/Place)': '강남 카페'
}

# 2. Agent2가 템플릿 생성 및 변수 추출
template = "안녕하세요 #{고객명}님. #{일시}에 #{장소}에서 #{모임명}이 있습니다."
template_variables = [
    {"variable_key": "고객명", "placeholder": "#{고객명}", "required": True},
    {"variable_key": "일시", "placeholder": "#{일시}", "required": True},
    {"variable_key": "장소", "placeholder": "#{장소}", "required": True},
    {"variable_key": "모임명", "placeholder": "#{모임명}", "required": True}
]

# 3. Variable Mapper가 자동 매핑
mapping_result = {
    "mapped_variables": {
        "고객명": "김철수님",      # ← 누가 (To/Recipient)
        "모임명": "독서모임",      # ← 무엇을 (What/Subject)
        "일시": "2024년 1월 15일 14:00",  # ← 언제 (When/Time)
        "장소": "강남 카페"       # ← 어디서 (Where/Place)
    },
    "unmapped_variables": [],  # 모든 변수 매핑 성공!
    "mapping_coverage": 1.0    # 100% 매핑 완료
}

# 4. 완성된 템플릿 반환
final_template = "안녕하세요 김철수님님. 2024년 1월 15일 14:00에 강남 카페에서 독서모임이 있습니다."
```

### 재질문 시스템 플로우 📚
```
1. 사용자: "카페 모임 안내해줘"
   → Agent1 변수 추출: {무엇을: "카페 모임", 누가: "없음", 언제: "없음"}
   → Agent2 템플릿 생성: "#{고객명}님, #{일시}에 #{모임명}이 있습니다."
   → Variable Mapper: 매핑 실패 (고객명, 일시 누락)
   → 응답: "INCOMPLETE_INFORMATION" + 재질문

2. 사용자: "회원들에게, 내일 오후 2시"
   → 컨텍스트 조합: "카페 모임 안내해줘 회원들에게, 내일 오후 2시"
   → Agent1 재분석: {누가: "회원들", 언제: "내일 오후 2시", 무엇을: "카페 모임"}
   → Variable Mapper 재매핑: 100% 완료
   → 최종 템플릿 반환
```

### 5단계 검증 시스템 📚
```python
# 사용자 입력: "김철수님에게 할인 이벤트 안내"
validation_pipeline = [
    ProfanityChecker(),     # 1단계: 비속어 검사
    BlacklistTool(),        # 2단계: 금지어 검사
    WhitelistTool(),        # 3단계: 허용어 검사
    InfoCommLawTool(),      # 4단계: 정보통신법 준수
    TemplateValidator()     # 5단계: 템플릿 품질 검사
]

# 광고성 내용 감지 시 자동으로 [광고] 표기 추가 안내
```

## 📊 **현재 구현 완성도 분석**

### ✅ **잘 구현된 부분 (90%+ 완성도)**
1. **Variable Mapper**: 완벽한 키워드 매핑 + 유사성 매핑
2. **검증 도구들**: 5단계 검증 시스템 완전 구현
3. **Agent1 재질문**: 컨텍스트 기반 대화 상태 관리
4. **예외 처리**: 이상한 입력에 대한 완벽한 차단
5. **API 구조**: FastAPI 기반 완성된 엔드포인트

### 🟨 **부분 구현된 부분 (50-80% 완성도)**
1. **버튼 자동 생성**: 키워드 기반 감지는 있지만 URL/문서 타입 변경 없음
2. **대화 컨텍스트**: 파라미터는 있지만 세션 관리 없음
3. **Agent2 매핑 연동**: 코드는 있지만 완전한 플로우 검증 필요

### ❌ **미구현된 부분 (0-30% 완성도)**
1. **Celery 멀티스레드**: 전혀 구현 안됨
2. **세션 관리**: 메모리/Redis 기반 세션 스토어 없음
3. **실시간 API**: 변수 개별 업데이트 엔드포인트 없음
4. **카테고리별 Few-Shot**: 일반적인 프롬프트만 사용

## 🎯 **마무리 단계 핵심 포인트**

### 템플릿 품질을 위한 우선순위
1. **카테고리별 Few-Shot 예제 추가** → 템플릿 품질 대폭 향상
2. **링크/문서 자동 인식** → 사용자 요구사항 충족
3. **세션 관리** → 진정한 챗봇 경험 제공

### 성능을 위한 우선순위
1. **Celery 도입** → 대용량 트래픽 대응
2. **Redis 캐싱** → 응답 속도 개선
3. **비동기 최적화** → 동시 처리 성능 향상

## 예상 사용자 플로우 (완성된 시스템)

```
1. 사용자: "카페 모임 안내 메시지 만들어줘"
   → POST /ai/templates (initial_request)

2. AI: 부분 템플릿 생성 + 세션 생성
   → Response: session_id, partial_template, missing_variables

3. 사용자: "동호회원들에게, 이번 주 토요일 3시"
   → POST /ai/templates/{session_id}/variables

4. AI: 변수 업데이트 + 미리보기
   → Response: updated_preview, remaining_variables

5. 사용자: "강남역 스타벅스, 010-1234-5678"
   → POST /ai/templates/{session_id}/complete

6. AI: 최종 템플릿 완성
   → Response: final_template, template_id
```

---

## 🚀 **오늘 구현 예정 기능 상세 계획**

### 1. 사용자별 대화 세션 관리 시스템 (Redis 기반)
```python
# src/core/session_manager.py
class SessionManager:
    def create_session(user_id: int) -> str
    def get_session(session_id: str) -> SessionInfo
    def update_session(session_id: str, updates: Dict) -> bool
    def delete_session(session_id: str) -> bool
    def cleanup_expired_sessions() -> int
```

### 2. 실시간 변수 업데이트 API 엔드포인트 3개 추가
```python
# server.py에 추가
@app.post("/ai/templates/{session_id}/variables")  # 변수 개별 업데이트
@app.get("/ai/templates/{session_id}/preview")     # 부분 완성 미리보기
@app.post("/ai/templates/{session_id}/complete")   # 최종 완성
```

### 3. 카테고리별 Few-Shot 예제 추가 및 템플릿 품질 향상
```python
# src/tools/category_examples.py
few_shot_examples = {
    "003001": ["예약이 완료되었습니다...", "#{고객명}님의 예약..."],
    "009001": ["[쿠폰] #{고객명}님께 특별 할인...", "#{기간} 한정 쿠폰..."]
}
```

### 4. 부분 완성 템플릿 미리보기 기능
```python
# src/core/template_preview.py
class TemplatePreview:
    def generate_preview(template: str, variables: Dict) -> str
    def calculate_completion_rate(template: str, variables: Dict) -> float
    def get_next_required_variables(missing_vars: List) -> List
```

### 5. Agent2 템플릿→변수 완성→검증 파이프라인 테스트 및 검증
- Variable Mapper 연동 상태 점검
- 5단계 검증 도구 실행 확인
- 전체 플로우 통합 테스트

---

## 총 예상 구현 시간: 6-8시간 (오늘 내 완료 가능)

2. AI: 부분 템플릿 생성 + 세션 생성
   → Response: session_id, partial_template, missing_variables

3. 사용자: "동호회원들에게, 이번 주 토요일 3시"
   → POST /ai/templates/{session_id}/variables

4. AI: 변수 업데이트 + 미리보기
   → Response: updated_preview, remaining_variables

5. 사용자: "강남역 스타벅스, 010-1234-5678"
   → POST /ai/templates/{session_id}/complete

6. AI: 최종 템플릿 완성
   → Response: final_template, template_id
```

---

## 우선순위

🔥 **1단계 (핵심)**: Variable Mapper + 세션 관리
⚡ **2단계 (UX)**: 실시간 업데이트 API + 미리보기
🔧 **3단계 (품질)**: 검증 도구 연동 + 테스트

---

과부하테스트
locust.io, k6.io

---

## 🚨 **EC2 배포 긴급 해결 필요**

### EC2 인스턴스 접속 불가 문제 - 최우선 해결 필요
- [ ] **EC2 인스턴스 상태 확인**
  - 인스턴스 ID: `i-07141258d6c67bbb7` (현재 존재하지 않음)
  - AWS 콘솔에서 인스턴스 상태 및 리전 확인
  - 인스턴스가 종료되었는지, 다른 리전으로 이동했는지 확인
- [ ] **새로운 인스턴스 설정 (필요시)**
  - 새 EC2 인스턴스 생성
  - 보안 그룹 설정 (포트 8000 허용)
  - GitHub Actions Secrets 업데이트
  - SSH 키 페어 재설정
- [ ] **배포 환경 복구**
  - GitHub Actions의 EC2_HOST, EC2_USER, EC2_KEY 등 재설정
  - 환경 변수 (.env) 파일 재배치
  - 서버 의존성 재설치
- [ ] **원인 분석**
  - config.py 변경사항이 EC2에 미친 영향 분석
  - 향후 유사 문제 방지 방안 수립