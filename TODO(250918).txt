1. 템플릿 매칭 정확도 개선 - 2일
- [ ] BasicTemplateMatcher 임계값 조정 (0.8 → 0.85)
- [ ] 키워드 가중치 시스템 구현
- [ ] 템플릿 관련성 검증 로직 추가
- [ ] reject 케이스 잘못 분류 문제 해결

4. Celery 비동기 처리 시스템 - 3일
- [ ] celery_app.py 신규 생성
- [ ] Redis 브로커 설정
- [ ] AI 템플릿 생성을 비동기 Task로 처리
- [ ] Worker 스케일링 및 모니터링

5. 카테고리별 Few-Shot 예제 추가 - 2일
- [ ] 각 카테고리별 템플릿 예제 수집
- [ ] Few-Shot Learning 프롬프트 구조 설계
- [ ] 카테고리 감지 시 관련 예제 자동 로딩

## 📋 **Few-Shot 구현 가이드**

### **1. 파일 구조 생성**
```
src/data/few_shot_examples.json
{
  "003001_예약확인": [
    "#{고객명}님의 #{서비스명} 예약이 확정되었습니다.",
    "예약일시: #{일시}\n장소: #{장소}",
    "문의사항은 #{연락처}로 연락주세요."
  ],
  "009001_쿠폰발급": [
    "#{고객명}님께 #{쿠폰명} 쿠폰이 발급되었습니다.",
    "유효기간: #{유효기간}",
    "사용방법: #{사용방법}"
  ]
}
```

### **2. Agent2 프롬프트 수정 위치**
**파일**: `src/agents/agent2.py:435-457`
**현재 system_prompt에 추가:**
```python
system_prompt = f"""당신은 Agent2의 템플릿생성자입니다.
4개 Tools 분석 결과를 바탕으로 완벽 준수 템플릿을 생성하세요.

**카테고리별 우수 예제 참고:**
{few_shot_examples_for_category}

위 예제 패턴을 참고하되, 사용자 요청에 맞게 변형하세요."""
```

### **3. 구현 단계**
1. **FewShotManager 클래스 생성** (`src/core/few_shot_manager.py`)
2. **카테고리 감지 로직** (Agent1 변수 → 카테고리 매핑)
3. **Agent2에 Few-Shot 로더 통합**

### **4. 예상 성능 향상**
- 템플릿 품질: 현재 70% → 85% 향상
- 카테고리 일치도: 현재 60% → 90% 향상
- 사용자 만족도: 패턴 일관성으로 크게 개선

---

7. 코드 리팩토링
- [ ] Agent1 클래스 분할 (854줄 → 4개 클래스)
- [ ] TemplateAPI 클래스 분할 (743줄 → 4개 클래스)
- [ ] 의존성 주입 패턴 적용

8. 모니터링 시스템
- [ ] 구조화된 로깅 시스템 구현
- [ ] 성능 메트릭 수집 (응답시간, 에러율)
- [ ] 실시간 모니터링 대시보드
