6. 대형 클래스 분할
   파일: src/agents/agent1.py (854줄), api.py TemplateAPI (743줄)
   문제: 단일 책임 원칙 위반, 유지보수 어려움
   해결: 기능별 클래스 분할, 컴포지션 패턴 적용

7. 성능 최적화
   파일: agent1.py, agent2.py, template_selector.py
   문제: LLM API 순차 호출, 캐싱 부재, 비효율적 문자열 처리
   해결: 비동기 처리, Redis 캐싱, 정규식 최적화

9. 설정 관리 개선
   파일: config.py, ec2_config.py
   문제: 하드코딩된 설정값, 환경별 설정 부재
   해결: 환경변수 기반 설정, 검증 로직 추가

📋 LOW PRIORITY - 낮은 우선순위
===============================

10. 코드 품질 개선
    문제: 한/영 주석 혼재, 매직 넘버, 긴 매개변수 리스트
    해결: 코드 스타일 가이드 적용, 상수 정의, 매개변수 객체화

11. 테스트 및 문서화
    문제: 테스트 파일 없음, API 문서 부족, 통합 테스트 없음
    해결: pytest 도입, OpenAPI 문서화, 통합 테스트 작성

12. 로깅 및 모니터링
    문제: 일관성 없는 로깅, 구조화된 로깅 부족, 성능 메트릭 없음
    해결: 구조화된 로그, 성능 모니터링, 에러 트래킹

🔧 주요 파일별 구체적 이슈
===========================

api.py:
- 라인 75: 정의되지 않은 self.template_generator 참조
- 라인 118-119: Agent1 중복 초기화
- 라인 232-626: export_to_json 메소드 너무 긴 (394줄)
- 라인 459-626: 하드코딩된 카테고리 매핑

server.py:
- 라인 67-68: 스레드 안전하지 않은 전역 변수 rate limiting
- 라인 206: 에지 케이스 처리 부족한 전처리
- 라인 292-337: 반복적인 에러 처리 코드

src/agents/agent1.py:
- 라인 29-39: 복잡한 importlib 모듈 로딩
- 라인 654-705: 단순화 가능한 규칙 기반 매핑
- 라인 707-729: 느릴 수 있는 AI 지원 매핑 폴백

src/agents/agent2.py:
- 라인 374-553: 해결되지 않은 머지 충돌 (CRITICAL!)
- 라인 89-131: 단순한 BlackList 도구 구현
- 라인 288-308: 분류기 초기화 에러 처리 개선 필요

src/tools/variable_extractor.py:
- 라인 157-183: 설정 가능해야 할 하드코딩된 컨텍스트 규칙
- 라인 46-84: 외부화해야 할 긴 프롬프트 문자열


