name: Python FastAPI CI/CD to EC2

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  PYTHON_VERSION: '3.11'

jobs:
  # 1단계: 코드 테스트
  test:
    name: Test Application
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: ${{ runner.os }}-pip-
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Run tests (if available)
      run: |
        # 테스트가 있다면 실행
        if [ -f "test_*.py" ] || [ -d "tests" ]; then
          python -m pytest -v || echo "No tests found"
        else
          echo "No test files found, skipping tests"
        fi

  # 2단계: EC2에 배포 (main 브랜치만)
  deploy:
    name: Deploy to EC2
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
        
    - name: Setup SSH
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts
        
    - name: Deploy to EC2
      run: |
        # 전체 프로젝트를 EC2로 동기화
        rsync -avz --delete \
          --exclude '.git' \
          --exclude '__pycache__' \
          --exclude '*.pyc' \
          --exclude '.env' \
          -e "ssh -i ~/.ssh/id_rsa" \
          ./ ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:~/Jober_ai/
        
        # EC2에서 배포 스크립트 실행
        ssh -i ~/.ssh/id_rsa ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
          cd ~/Jober_ai
          
          # 기존 FastAPI 프로세스 종료
          sudo pkill -f 'server.py' || true
          sudo pkill -f 'uvicorn' || true
          
          # Python 의존성 설치 (Amazon Linux)
          pip3 install --user -r requirements.txt
          
          # FastAPI 서버 시작
          nohup python3 server.py > ~/app.log 2>&1 &
          
          # 애플리케이션 시작 대기
          sleep 15
          
          # 헬스체크
          if curl -f http://localhost:8000/health; then
            echo "Deployment successful!"
          else
            echo "Deployment failed!"
            exit 1
          fi
        EOF