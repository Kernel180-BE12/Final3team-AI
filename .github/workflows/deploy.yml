name: Python FastAPI CI/CD to EC2 (Poetry)

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  PYTHON_VERSION: '3.11'

jobs:
  # 1단계: 코드 테스트
  test:
    name: Test Application
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true
        
    - name: Cache Poetry dependencies
      uses: actions/cache@v4
      with:
        path: .venv
        key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}
        restore-keys: ${{ runner.os }}-poetry-
        
    - name: Install dependencies
      run: |
        poetry config virtualenvs.create true
        poetry install --no-interaction
        
    - name: Run tests (if available)
      run: |
        if [ -f "test_*.py" ] || [ -d "tests" ]; then
          poetry run pytest -v || echo "No tests found"
        else
          echo "No test files found, skipping tests"
        fi

  # 2단계: EC2에 배포 (main 브랜치만)
  deploy:
    name: Deploy to EC2
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
        
    - name: Setup SSH
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        chmod 700 ~/.ssh
        ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts
        
        # SSH 키 유효성 검사
        ssh-keygen -l -f ~/.ssh/id_rsa
        
    - name: Deploy to EC2
      run: |
        # 전체 프로젝트를 EC2로 동기화
        rsync -avz --delete \
          --exclude '.git' \
          --exclude '__pycache__' \
          --exclude '*.pyc' \
          --exclude '.env' \
          --exclude '.venv' \
          --exclude 'node_modules' \
          -e "ssh -i ~/.ssh/id_rsa" \
          ./ ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:~/Jober_ai/
        
        # EC2에서 배포 스크립트 실행
        ssh -i ~/.ssh/id_rsa ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
          cd ~/Jober_ai
          
          # 기존 FastAPI 프로세스 종료
          sudo pkill -f 'server.py' || true
          sudo pkill -f 'uvicorn' || true
          
          # Poetry 설치 (처음만)
          if ! command -v poetry &> /dev/null; then
            curl -sSL https://install.python-poetry.org | python3 -
            export PATH="$HOME/.local/bin:$PATH"
            echo 'export PATH="$HOME/.local/bin:$PATH"' >> ~/.bashrc
          fi
          
          # PATH 설정
          export PATH="$HOME/.local/bin:$PATH"
          
          # Poetry로 의존성 설치
          poetry config virtualenvs.create true
          poetry config virtualenvs.in-project true
          poetry install --only=main
          
          # FastAPI 서버 시작 (Poetry 가상환경에서 - RAGAS 호환을 위해 asyncio 사용)
          nohup poetry run uvicorn server:app --host 0.0.0.0 --port 8000 --loop asyncio > ~/app.log 2>&1 &
          
          # 애플리케이션 시작 대기
          sleep 15
          
          # 헬스체크
          if curl -f http://localhost:8000/health; then
            echo "Deployment successful!"
          else
            echo "Deployment failed!"
            exit 1
          fi
        EOF